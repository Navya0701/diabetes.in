import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
%matplotlib inline

df = pd.read_csv('diabetes.csv')

df.info()

df.head(10)

df.isnull().sum()

x=df.iloc[:,[4,6]].values
x

import scipy.cluster.hierarchy as sch
dendro=sch.dendrogram(sch.linkage(x,method="ward"))
plt.title("dendrogram plot")
plt.xlabel("pregnancies")
plt.ylabel("BMI")
plt.show()

import seaborn as sns
plt.figure(figsize=(10,10))
sns.heatmap(df.corr(), annot = True)

from sklearn.model_selection import train_test_split

X = df.iloc[:,:-1]
y = df['Outcome']

from sklearn.model_selection import train_test_split

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

np.random.seed(0)
X = 2 * np.random.rand(100, 1) 
y = 4 + 3 * X + np.random.randn(100, 1)  
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=62)
X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, random_state=62)

linear_regression_model = LinearRegression()

linear_regression_model.fit(X_train, y_train)


y_pred = linear_regression_model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error:", mse)

plt.scatter(X_test, y_test, color='blue')
plt.plot(X_test, y_pred, color='red')
plt.xlabel("BMI")
plt.ylabel("BloodPressure")
plt.title("Linear Regression")
plt.show()


mse = mean_squared_error(y_test, y_pred)

if mse < 1:
    print("The model has very low error. Predictions are close to actual values.")
elif 1 <= mse < 5:
    print("The model has moderate error. Predictions are relatively close to actual values.")
else:
    print("The model has high error. Predictions are not close to actual values.")


plt.figure(figsize=(4,5))
plt.scatter(y_test, y_pred, color='blue')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], color='red', linestyle='--')
plt.xlabel('predicted')
plt.ylabel('actual')
plt.title('Actual vs Predicted Values')
plt.grid(True)
plt.show()


df['Outcome'].value_counts()

from sklearn.metrics import r2_score

train_r2 = r2_score(y_train, linear_regression_model.predict(X_train))
print("Training R-squared:", train_r2)

test_r2 = r2_score(y_test, y_pred)
print("Testing R-squared:", test_r2)


